{
	"info": {
		"_postman_id": "5b5979a0-1d1a-4567-86cf-a837e298882d",
		"name": "Laundry API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31486336"
	},
	"item": [
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Adding Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should have organizationId property and not equal to empty\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data.organization).to.ownProperty(\"id\");\r",
									"    pm.expect(data.organization.id).to.not.equals(\"\");\r",
									"\r",
									"    pm.environment.set(\"organizationId\", data.organization.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lotus Laundry\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/organizations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Organization with Exists Organization Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 400 value\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lotus Laundry\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/organizations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equals(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should have property accessToken with correct value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty(\"accessToken\");\r",
									"    pm.expect(data.accessToken).to.not.equals(\"\");\r",
									"    pm.expect(data.accessToken).to.not.equals(null);\r",
									"\r",
									"    pm.environment.set(\"organizationAccessToken\", data.accessToken);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lotus Laundry\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/organizations/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"organizations",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Organization with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {\r",
									"   pm.response.to.have.status(401);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equals(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lotus Laundry\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/organizations/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"organizations",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Adding User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should have userId property and not equal to empty\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data.user).to.ownProperty(\"id\");\r",
									"    pm.expect(data.user.id).to.not.equals(\"\");\r",
									"\r",
									"    pm.environment.set(\"userId\", data.user.id);\r",
									"    pm.environment.set(\"username\", data.user.username);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{organizationAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Axel\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding User with Exists Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 400 value\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{organizationAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Axel\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting User By Correct Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contain user object\", () => {\r",
									"    const { data } = pm.response.json();\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('user');\r",
									"    pm.expect(data.user).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"user object should only contain username and idOrganization\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { user } } = responseJson;\r",
									"\r",
									"    pm.expect(user).to.have.ownProperty(\"username\");\r",
									"    pm.expect(user.username).to.equals(pm.environment.get(\"username\"));\r",
									"    pm.expect(user).to.have.ownProperty(\"idOrganization\");\r",
									"    pm.expect(user.idOrganization).to.equals(pm.environment.get(\"organizationId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{organizationAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting User By Incorrect Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 404 value\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{organizationAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/users/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"xxx"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "Post Authentication with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equals(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should have property accessToken and refreshToken with correct value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty(\"accessToken\");\r",
									"    pm.expect(data.accessToken).to.not.equals(\"\");\r",
									"    pm.expect(data.accessToken).to.not.equals(null);\r",
									"    pm.expect(data).to.have.ownProperty(\"refreshToken\");\r",
									"    pm.expect(data.refreshToken).to.not.equals(\"\");\r",
									"    pm.expect(data.refreshToken).to.not.equals(null);\r",
									"\r",
									"    // menyimpan accessToken dan refreshToken di environment variable\r",
									"    pm.environment.set(\"accessToken\", data.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", data.refreshToken);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Axel\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/authentications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Authentication with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 401 value', () => {\r",
									"   pm.response.to.have.status(401);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equals(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"Axel\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/authentications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Members",
			"item": [
				{
					"name": "Adding Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"\r",
									"    pm.environment.set(\"memberId\", responseJson.data.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"meltryllis\",\r\n    \"phoneNumber\": \"085333270333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Member with Already Taken Name and Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 400 value\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"meltryllis\",\r\n    \"phoneNumber\": \"085333270333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a members array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('members');\r",
									"    pm.expect(data.members).to.be.an('array');\r",
									"    pm.expect(data.members).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Members based on Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a members array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('members');\r",
									"    pm.expect(data.members).to.be.an('array');\r",
									"    pm.expect(data.members).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members?input=meltryllis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members"
							],
							"query": [
								{
									"key": "input",
									"value": "meltryllis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Members based on Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a members array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('members');\r",
									"    pm.expect(data.members).to.be.an('array');\r",
									"    pm.expect(data.members).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members?input=085333270333",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members"
							],
							"query": [
								{
									"key": "input",
									"value": "085333270333"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Member with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 404 value', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equals(\"fail\");\r",
									"    pm.expect(responseJson).to.have.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Member with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const memberId = pm.environment.get(\"memberId\");\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"    pm.expect(responseJson.data.member).to.be.an(\"object\");\r",
									"    pm.expect(responseJson.data.member.id).to.equal(memberId);\r",
									"    pm.expect(responseJson.data.member.name).to.equal(\"meltryllis\");\r",
									"    pm.expect(responseJson.data.member.phoneNumber).to.equal(\"085333270333\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members/{{memberId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Member with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"meltlilith\",\r\n    \"phoneNumber\": \"085111222333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/members/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Member with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail members', () => {\r",
									"    const memberId = pm.environment.get('memberId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/members/${memberId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`,\r",
									"        },\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.member).to.be.an('object');\r",
									"                pm.expect(responseJson.data.member.id).to.equal(memberId);\r",
									"                pm.expect(responseJson.data.member.name).to.equal('meltlilith');\r",
									"                pm.expect(responseJson.data.member.phoneNumber).to.equal(\"085111222333\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"meltlilith\",\r\n    \"phoneNumber\": \"085111222333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/members/{{memberId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Member with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members/xxx",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Member with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail members', () => {\r",
									"    const memberId = pm.environment.get('memberId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/members/${memberId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`,\r",
									"        },\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/members/{{memberId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "Adding Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"\r",
									"    pm.environment.set(\"serviceId\", responseJson.data.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Handuk\",\r\n    \"unit\": \"satuan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Service with Already Exists Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 400 value\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Handuk\",\r\n    \"unit\": \"satuan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a services array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('services');\r",
									"    pm.expect(data.services).to.be.an('array');\r",
									"    pm.expect(data.services).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/services",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Service with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail service', () => {\r",
									"    const serviceId = pm.environment.get('serviceId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/services/${serviceId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`,\r",
									"        },\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.service).to.be.an('object');\r",
									"                pm.expect(responseJson.data.service.id).to.equal(serviceId);\r",
									"                pm.expect(responseJson.data.service.name).to.equal(\"Cuci Setrika\");\r",
									"                pm.expect(responseJson.data.service.unit).to.equal(\"kiloan\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Cuci Setrika\",\r\n    \"unit\": \"kiloan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Service Option by Service Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"\r",
									"    pm.environment.set(\"optionId\", responseJson.data.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"biasa\",\r\n    \"price\": 5000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}/options",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}",
								"options"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Service Option by Service Id and Option Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"express\",\r\n    \"price\": 10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}/options/{{optionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}",
								"options",
								"{{optionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Service with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should contain service object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('service');\r",
									"    pm.expect(data.service).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('service object should contain correct value for id, name, and unit property', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { service } } = responseJson;\r",
									"\r",
									"    const expectedId = pm.environment.get('serviceId');\r",
									"    const expectedName = 'Cuci Setrika';\r",
									"    const expectedUnit = \"kiloan\";\r",
									"\r",
									"    pm.expect(service).to.have.ownProperty('id');\r",
									"    pm.expect(service.id).to.equals(expectedId);\r",
									"\r",
									"    pm.expect(service).to.have.ownProperty('name');\r",
									"    pm.expect(service.name).to.equals(expectedName);\r",
									"\r",
									"    pm.expect(service).to.have.ownProperty('unit');\r",
									"    pm.expect(service.unit).to.eql(expectedUnit);\r",
									"});\r",
									"\r",
									"pm.test('service should contain options object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { service } } = responseJson;\r",
									"\r",
									"    pm.expect(service).to.have.ownProperty('options');\r",
									"});\r",
									"\r",
									"pm.test('service should have a options array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data: { service: { options } } } = responseJson;\r",
									"\r",
									"    pm.expect(options).to.be.an('array');\r",
									"    pm.expect(options).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Service Option by Service Id and Option Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}/options/{{optionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}",
								"options",
								"{{optionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Service with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail members', () => {\r",
									"    const serviceId = pm.environment.get('serviceId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/services/${serviceId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`,\r",
									"        },\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/services/{{serviceId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"services",
								"{{serviceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add Member A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"memberIdA\", responseJson.data.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"meltryllis\",\r\n    \"phoneNumber\": \"085333270333\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/members",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Service A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"serviceIdA\", responseJson.data.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Cuci Setrika\",\r\n    \"unit\": \"kiloan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/services",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Service B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"serviceIdB\", responseJson.data.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sprei\",\r\n    \"unit\": \"satuan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/services",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Option A",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"optionIdA\", responseJson.data.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"biasa\",\r\n    \"price\": 5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/services/{{serviceIdA}}/options",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"services",
										"{{serviceIdA}}",
										"options"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Option B",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"optionIdB\", responseJson.data.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Biasa\",\r\n    \"price\": 10000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/services/{{serviceIdB}}/options",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"services",
										"{{serviceIdB}}",
										"options"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Adding Transaction with Single Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"\r",
									"    pm.environment.set(\"transactionId\", responseJson.data.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"idMember\": \"{{memberIdA}}\",\r\n    \"options\": [\r\n        {\r\n            \"idOption\": \"{{optionIdA}}\",\r\n            \"qty\": 5.0\r\n        }\r\n    ],\r\n    \"description\": \"10 potong\",\r\n    \"estimation\": \"3 hari\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Transaction with Multiple Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 201 value\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"idMember\": \"{{memberIdA}}\",\r\n    \"options\": [\r\n        {\r\n            \"idOption\": \"{{optionIdA}}\",\r\n            \"qty\": 4.0\r\n        },\r\n        {\r\n            \"idOption\": \"{{optionIdB}}\",\r\n            \"qty\": 2\r\n        }\r\n    ],\r\n    \"description\": \"30 potong, 5 sarung bg\",\r\n    \"estimation\": \"3 hari\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Transaction with Not Enough Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 400 value\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"fail\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"idMember\": \"{{memberIdA}}\",\r\n    \"options\": [\r\n        {\r\n            \"idOption\": \"{{optionIdA}}\",\r\n            \"qty\": 5.0\r\n        }\r\n    ],\r\n    \"description\": \"10 potong\",\r\n    \"payment\": 10000,\r\n    \"estimation\": \"3 hari\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a transactions array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('transactions');\r",
									"    pm.expect(data.transactions).to.be.an('array');\r",
									"    pm.expect(data.transactions).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions with Member Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson).to.ownProperty(\"status\");\r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson).to.ownProperty(\"data\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a transactions array and contains at least 1 item', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('transactions');\r",
									"    pm.expect(data.transactions).to.be.an('array');\r",
									"    pm.expect(data.transactions).lengthOf.at.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/transactions?memberName=meltryllis",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							],
							"query": [
								{
									"key": "memberName",
									"value": "meltryllis"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transaction with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response status code should have 200 value\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response Content-Type header should have application/json value\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should be an object\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have correct property and value\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const transactionId = pm.environment.get(\"transactionId\");\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal(\"success\");\r",
									"    pm.expect(responseJson.data).to.be.an(\"object\");\r",
									"    pm.expect(responseJson.data.transaction).to.be.an(\"object\");\r",
									"    pm.expect(responseJson.data.transaction.id).to.equal(transactionId);\r",
									"    pm.expect(responseJson.data.transaction.status).to.equal(\"In Progress\");\r",
									"    pm.expect(responseJson.data.transaction.paymentStatus).to.equal(\"Unpaid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/transactions/{{transactionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Transaction with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail transaction', () => {\r",
									"    const transactionId = pm.environment.get('transactionId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/transactions/${transactionId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.transaction).to.be.an('object');\r",
									"                pm.expect(responseJson.data.transaction.id).to.equal(transactionId);\r",
									"                pm.expect(responseJson.data.transaction.status).to.equal(\"Done\");\r",
									"                pm.expect(responseJson.data.transaction.paymentStatus).to.equal(\"Paid\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"idMember\": \"{{memberId}}\",\r\n    \"options\": [\r\n        {\r\n            \"idOption\": \"{{optionIdA}}\",\r\n            \"qty\": 5.0\r\n        }\r\n    ],\r\n    \"description\": \"15 potong\",\r\n    \"payment\": 25000,\r\n    \"status\": \"Done\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/transactions/{{transactionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Transaction with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail members', () => {\r",
									"    const transactionId = pm.environment.get('transactionId');\r",
									"    const port = pm.environment.get('port');\r",
									"    const getRequest = {\r",
									"        url: `http://localhost:${port}/transactions/${transactionId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Authorization\": `Bearer ${pm.environment.get(\"accessToken\")}`\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(getRequest, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/transactions/{{transactionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"transactions",
								"{{transactionId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End Of Test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/members",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"members"
					]
				}
			},
			"response": []
		}
	]
}